datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  ADMIN
  ACCOUNTANT
  AGENT
  VIEWER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  memberships   UserOrg[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Org {
  id        String       @id @default(cuid())
  name      String
  country   String       @default("GY")
  settings  OrgSettings?
  members   UserOrg[]
  customers Customer[]
  taxCodes  TaxCode[]
  items     Item[]
  invoices  Invoice[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model OrgSettings {
  id                 String  @id @default(cuid())
  orgId              String  @unique
  org                Org     @relation(fields: [orgId], references: [id])
  brandHex           String? // primary color for theming
  allowNegativeStock Boolean @default(false)
}

model UserOrg {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   Role
  user   User   @relation(fields: [userId], references: [id])
  org    Org    @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
}

// NextAuth adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model InboundMailbox {
  id        String           @id @default(cuid())
  email     String           @unique
  orgId     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  logs      EmailIngestLog[]
}

model EmailIngestLog {
  id        String          @id @default(cuid())
  mailboxId String?
  mailbox   InboundMailbox? @relation(fields: [mailboxId], references: [id])
  vendor    String?
  billId    String?
  status    String
  error     String?
  createdAt DateTime        @default(now())
}

model Customer {
  id      String   @id @default(cuid())
  orgId   String
  name    String
  email   String?
  org     Org      @relation(fields: [orgId], references: [id])
  invoices Invoice[]
}

model TaxCode {
  id     String    @id @default(cuid())
  orgId  String
  name   String
  rate   Float
  org    Org       @relation(fields: [orgId], references: [id])
  items  Item[]
  lines  InvoiceLine[]
}

model Item {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  qtyOnHand   Int      @default(0)
  org         Org      @relation(fields: [orgId], references: [id])
  taxCodeId   String?
  taxCode     TaxCode? @relation(fields: [taxCodeId], references: [id])
  lines       InvoiceLine[]
}

model Invoice {
  id         String        @id @default(cuid())
  orgId      String
  customerId String?
  number     Int           @default(1)
  issueDate  DateTime      @default(now())
  dueDate    DateTime?
  status     String        @default("draft")
  org        Org           @relation(fields: [orgId], references: [id])
  customer   Customer?     @relation(fields: [customerId], references: [id])
  lines      InvoiceLine[]
  payments   Payment[]
}

model InvoiceLine {
  id          String   @id @default(cuid())
  invoiceId   String
  itemId      String?
  description String?
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxCodeId   String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  item        Item?    @relation(fields: [itemId], references: [id])
  taxCode     TaxCode? @relation(fields: [taxCodeId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  amount        Decimal  @db.Decimal(10, 2)
  date          DateTime @default(now())
  method        String
  receiptNumber Int
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
}
