generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  orgs          UserOrg[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id               String            @id @default(cuid())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  settings         OrgSettings?
  users            UserOrg[]
  customers        Customer[]
  taxCodes         TaxCode[]
  items            Item[]
  invoices         Invoice[]
  estimates        Estimate[]
  vendors          Vendor[]
  bills            Bill[]
  bankTransactions BankTransaction[]
}

model OrgSettings {
  orgId      String  @id
  timezone   String? @default("UTC")
  currency   String? @default("USD")
  apiKey     String? @unique
  webhookUrl String?
  org        Org     @relation(fields: [orgId], references: [id])
}

model UserOrg {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   String @default("member")
  user   User   @relation(fields: [userId], references: [id])
  org    Org    @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId])
}

model Customer {
  id       String    @id @default(cuid())
  orgId    String
  name     String
  email    String?
  org      Org       @relation(fields: [orgId], references: [id])
  invoices Invoice[]
  estimates Estimate[]
}

model TaxCode {
  id        String        @id @default(cuid())
  orgId     String
  name      String
  rate      Float
  org       Org           @relation(fields: [orgId], references: [id])
  items     Item[]
  lines     InvoiceLine[]
  estimateLines EstimateLine[]
  billLines BillLine[]
}

model Item {
  id          String        @id @default(cuid())
  orgId       String
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  org         Org           @relation(fields: [orgId], references: [id])
  taxCodeId   String?
  taxCode     TaxCode?      @relation(fields: [taxCodeId], references: [id])
  lines       InvoiceLine[]
}

model Invoice {
  id               String            @id @default(cuid())
  orgId            String
  customerId       String?
  number           Int               @default(1)
  issueDate        DateTime          @default(now())
  dueDate          DateTime?
  status           String            @default("draft")
  org              Org               @relation(fields: [orgId], references: [id])
  customer         Customer?         @relation(fields: [customerId], references: [id])
  lines            InvoiceLine[]
  payments         Payment[]
  bankTransactions BankTransaction[]
}

model InvoiceLine {
  id          String   @id @default(cuid())
  invoiceId   String
  itemId      String?
  description String?
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxCodeId   String?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  item        Item?    @relation(fields: [itemId], references: [id])
  taxCode     TaxCode? @relation(fields: [taxCodeId], references: [id])
}

model Estimate {
  id         String   @id @default(cuid())
  orgId      String
  customerId String?
  number     String   @unique
  issueDate  DateTime @default(now())
  expiryDate DateTime?
  status     String   @default("draft")
  subTotal   Decimal  @db.Decimal(10, 2)
  vatTotal   Decimal  @db.Decimal(10, 2)
  total      Decimal  @db.Decimal(10, 2)
  org        Org      @relation(fields: [orgId], references: [id])
  customer   Customer? @relation(fields: [customerId], references: [id])
  lines      EstimateLine[]
}

model EstimateLine {
  id          String   @id @default(cuid())
  estimateId  String
  description String?
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  taxCodeId   String?
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  taxCode     TaxCode? @relation(fields: [taxCodeId], references: [id])
}

model Payment {
  id               String            @id @default(cuid())
  invoiceId        String
  amount           Decimal           @db.Decimal(10, 2)
  date             DateTime          @default(now())
  method           String
  receiptNumber    Int
  invoice          Invoice           @relation(fields: [invoiceId], references: [id])
  bankTransactions BankTransaction[]
}

model Vendor {
  id    String @id @default(cuid())
  orgId String
  name  String
  org   Org    @relation(fields: [orgId], references: [id])
  bills Bill[]
}

model Bill {
  id               String            @id @default(cuid())
  orgId            String
  vendorId         String
  billDate         DateTime          @default(now())
  dueDate          DateTime?
  wht              Decimal?          @db.Decimal(10, 2)
  org              Org               @relation(fields: [orgId], references: [id])
  vendor           Vendor            @relation(fields: [vendorId], references: [id])
  lines            BillLine[]
  bankTransactions BankTransaction[]
}

model BillLine {
  id          String   @id @default(cuid())
  billId      String
  description String?
  quantity    Int      @default(1)
  unitCost    Decimal  @db.Decimal(10, 2)
  taxCodeId   String?
  bill        Bill     @relation(fields: [billId], references: [id])
  taxCode     TaxCode? @relation(fields: [taxCodeId], references: [id])
}

model BankTransaction {
  id        String   @id @default(cuid())
  orgId     String
  bankName  String
  accountNo String
  date      DateTime
  amount    Decimal  @db.Decimal(10, 2)
  type      String
  memo      String?
  invoiceId String?
  paymentId String?
  billId    String?
  status    String   @default("UNMATCHED")

  org     Org      @relation(fields: [orgId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])
  bill    Bill?    @relation(fields: [billId], references: [id])

  @@index([orgId, date])
}
